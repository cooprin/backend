const { pool } = require('../database');
const { PortalApi } = require('../api/portal'); // –ü—Ä–∏–ø—É—Å–∫–∞—é —â–æ —î —Ç–∞–∫–∏–π API

class ObjectsRealtimeService {
  constructor() {
    this.updateInterval = null;
    this.isRunning = false;
  }

  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  start() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    console.log('üöó Starting objects real-time service...');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
    this.updateInterval = setInterval(() => {
      this.sendObjectsUpdate();
    }, 60000);
    
    // –ü–µ—Ä—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ä–∞–∑—É
    this.sendObjectsUpdate();
  }

  // –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É
  stop() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = null;
    }
    this.isRunning = false;
    console.log('üõë Objects real-time service stopped');
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –æ–±'—î–∫—Ç—ñ–≤
  async sendObjectsUpdate() {
    try {
      if (!global.socketIO) {
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ real-time –¥–∞–Ω—ñ –æ–±'—î–∫—Ç—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π API)
      const objectsData = await this.getObjectsRealTimeData();
      
      if (objectsData && objectsData.length > 0) {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ Socket.IO
        global.socketIO.emitObjectsUpdate(objectsData);
        console.log(`üì° Sent real-time data for ${objectsData.length} objects`);
      }
    } catch (error) {
      console.error('Error sending objects update:', error);
    }
  }

async getObjectsRealTimeData() {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ö—Ç–æ –∑–∞—Ä–∞–∑ –æ–Ω–ª–∞–π–Ω —ñ –¥–∏–≤–∏—Ç—å—Å—è –æ–±'—î–∫—Ç–∏
    if (!global.socketIO || !global.socketIO.getConnectedClients) {
      return [];
    }

    const connectedClients = global.socketIO.getConnectedClients();
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–Ω–µ staff)
    const onlineClientIds = connectedClients
      .filter(client => client.userType === 'client')
      .map(client => client.id);

    if (onlineClientIds.length === 0) {
      console.log('No online clients - skipping real-time update');
      return [];
    }

    console.log(`Updating real-time data for ${onlineClientIds.length} online clients`);

    const WialonIntegrationService = require('./wialon-integration.service');
    const allObjectsData = [];
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∫–ª—ñ—î–Ω—Ç—ñ–≤
    for (const clientId of onlineClientIds) {
      try {
        const clientObjectsData = await WialonIntegrationService.getObjectsRealTimeData(clientId);
        allObjectsData.push(...clientObjectsData);
      } catch (error) {
        console.error(`Error getting real-time data for client ${clientId}:`, error);
      }
    }
    
    return allObjectsData;
  } catch (error) {
    console.error('Error getting objects real-time data:', error);
    return [];
  }
}
}

module.exports = new ObjectsRealtimeService();